<script setup>
import { ref, onMounted } from 'vue'
import { useAuthStore } from './stores/auth.js'
import { useProjectsStore } from './stores/projects.js'
import { useInvoicesStore } from './stores/invoices.js'
import LoginForm from './components/LoginForm.vue'
import ProjectList from './components/ProjectList.vue'
import InvoiceList from './components/InvoiceList.vue'

// 認証ストア
const authStore = useAuthStore()
// プロジェクト管理ストア
const projectsStore = useProjectsStore()
// 請求書管理ストア
const invoicesStore = useInvoicesStore()
// タブ切り替え状態
const activeTab = ref('projects')

// アプリ初期化時に認証状態チェック
onMounted(async () => {
  await authStore.checkAuthStatus()
  // ログイン済みの場合、プロジェクト一覧取得
  if (authStore.isLoggedIn) {
    await projectsStore.fetchProjects()
  }
})

// ログアウト処理
const handleLogout = async () => {
  const result = await authStore.logout()
  if (result.success) {
    console.log('ログアウト完了')
  }
}
</script>

<template>
  <!-- 未認証時: ログインフォーム表示 -->
  <LoginForm v-if="!authStore.isLoggedIn" />
  
  <!-- 認証済み時: メイン管理画面 -->
  <div v-else class="min-h-screen bg-gray-50">
    <!-- ヘッダー -->
    <header class="bg-gradient-to-r from-influberry-pink-light to-influberry-lavender-light shadow-lg border-b border-influberry-pink">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <!-- InfluBerry ロゴ -->
          <div class="flex items-center">
            <h1 class="text-xl font-bold text-white font-poppins">
              🍓 InfluBerry
            </h1>
            <span class="ml-2 text-sm text-white/80 font-noto">
              案件管理システム
            </span>
          </div>
          
          <!-- ユーザー情報・ログアウト -->
          <div class="flex items-center space-x-4">
            <span class="text-sm text-white font-poppins">
              こんにちは、{{ authStore.userName }}さん ✨
            </span>
            <button
              @click="handleLogout"
              :disabled="authStore.isLoading"
              class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-red-500 hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50"
            >
              {{ authStore.isLoading ? '処理中...' : 'ログアウト' }}
            </button>
          </div>
        </div>
      </div>
    </header>

    <!-- メインコンテンツ -->
<main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
  <div class="px-4 py-6 sm:px-0">
    <!-- タブナビゲーション -->
    <div class="bg-white rounded-lg shadow-sm mb-6">
      <div class="border-b border-gray-200">
        <nav class="-mb-px flex space-x-8 px-6" aria-label="Tabs">
          <button
            @click="activeTab = 'projects'"
            :class="[
              'py-4 px-1 border-b-2 font-medium text-sm',
              activeTab === 'projects'
                ? 'border-influberry-pink text-influberry-pink font-semibold'
                : 'border-transparent text-gray-500 hover:text-influberry-pink hover:border-influberry-pink-light'
            ]"
          >
            🏢 プロジェクト管理
          </button>
          <button
            @click="activeTab = 'invoices'"
            :class="[
              'py-4 px-1 border-b-2 font-medium text-sm',
              activeTab === 'invoices'
                ? 'border-influberry-lavender text-influberry-lavender font-semibold'
                : 'border-transparent text-gray-500 hover:text-influberry-lavender hover:border-influberry-lavender-light'
            ]"
          >
            📋 請求書管理
          </button>
        </nav>
      </div>
    </div>

    <!-- タブコンテンツ -->
    <div v-show="activeTab === 'projects'">
      <ProjectList />
    </div>
    
    <div v-show="activeTab === 'invoices'">
      <InvoiceList />
    </div>
  </div>
</main>
  </div>
</template>

<style scoped>
/* InfluBerry カスタムスタイル */
header {
  backdrop-filter: blur(10px);
}

/* スムーズなトランジション */
.fade-enter-active, .fade-leave-active {
  transition: opacity 0.3s ease;
}

.fade-enter-from, .fade-leave-to {
  opacity: 0;
}

/* モバイルファースト最適化 */
@media (max-width: 640px) {
  /* ヘッダー最適化 */
  .max-w-7xl {
    padding-left: 1rem;
    padding-right: 1rem;
  }
  
  /* タブナビゲーション最適化 */
  nav {
    padding-left: 1rem;
    padding-right: 1rem;
  }
  
  nav button {
    padding: 0.75rem 0.5rem;
    font-size: 0.875rem;
  }
}

@media (max-width: 480px) {
  /* 超小画面対応 */
  .flex.items-center.space-x-4 {
    flex-direction: column;
    align-items: flex-end;
    gap: 0.5rem;
  }
  
  nav {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
  }
  
  nav button {
    padding: 0.5rem 0.25rem;
    font-size: 0.8rem;
  }
}
</style>